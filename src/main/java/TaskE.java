/**
 * Условия
 * Реализуйте управляющую логику для автомата по продаже товаров. Автомат должен выполнять следующие функции
 *
 * формирование "корзины" из выбранных покупателем товаров
 * прием наличных денег - купюр и монет
 * выдача оплаченного товара
 * выдача сдачи
 * отмена заказа
 * Автомат продает штучные товары N (1 ≤ N ≤ 100) видов, для каждого товара на панели автомата расположена кнопка "Купить".
 *
 * При нажатии этой кнопки товар откладывается в "корзину". После выбора всех нужных товаров покупатель должен оплатить заказ и нажать кнопку "Выдать".
 *
 * Оплата осуществляется наличными деньгами - монетами и купюрами M (1 ≤ M ≤ 20) допустимых номиналов. Допустим номинал денежных единиц в диапазоне  (1 ≤ nominal ≤ 100000). Если внесена недостаточная для заказа сумма, и покупатель нажал кнопку "Выдать", автомат должен отказать в выдаче товара и проигнорировать это действие. При внесении достаточной для оплаты суммы автомат выдает товары и возвращает рассчитанную сдачу.
 *
 * Дисплей автомата содержит четыре числовых значения:
 *
 * Стоимость – стоимость текущей корзины
 * Внесено – сумма денег, внесенных покупателем с момента последней продажи или отмены заказа.
 * Осталось внести – разница между стоимостью текущей корзины и внесенной суммой (если эта разница отрицательна - отображается 0)
 * Сдача – разница между и внесенной суммой и стоимостью текущей корзины (если эта разница отрицательна - отображается 0)
 * Внесение денег и добавление товаров в корзину допустимо в любой последовательности (то есть возможно авансовое внесение денег).
 *
 * Заказ может быть отменен покупателем путем нажатия кнопки «Отмена». В этом случае автомат должен вернуть покупателю внесенную сумму и очистить корзину.
 *
 * Если в запасе автомата не хватает монет или купюр нужного номинала для того, чтобы выдать точную сумму сдачи – заказ должен быть отменен. То есть это равносильно нажатию кнопки «Отмена».
 *
 * При этом ваш алгоритм должен стремиться получить максимальную выручку, стараясь при возможности избегать отмены заказов из-за нехватки монет/купюр для сдачи. В данной задаче считается, что автомат может «заглядывать в будущее» - то есть он заранее знает на каком шаге, какие заказы будут выполнены, и используя это знание, может спланировать оптимальное использование монет. Однако запрещено обманывать покупателя, отменяя заказ в том случае, если точная выдача сдачи возможна.
 *
 * Если какой-то из товаров закончился, но покупатель пытается его заказать, автомат должен просто игнорировать это действие (то есть отобразить на дисплее то же самое, что было на предыдущем шаге).
 *
 * Покупатели могут пытаться расплатиться фальшивыми монетами или купюрами. Фальшивыми признаются денежные единицы неизвестного номинала. Допустимые номиналы перечислены во входных данных автомата. Внесение фальшивой денежной единицы должно игнорироваться.
 *
 * Формат входных данных
 * На первой строке - три числа через пробел:
 *
 * N M K
 * N - количество видов товаров (1 ≤ N ≤ 100)
 * M - количество допустимых номиналов денежных единиц (1 ≤ M ≤ 20)
 * K - количество операций покупателя (1 ≤ K ≤ 100000)
 * На следующих N строках - информация о товарах в формате:
 *
 * id qty price
 * id - код товара (1 ≤ id ≤ N)
 * qty - количество штук в остатке (1 ≤ qty ≤ 1000)
 * price - цена товара (1 ≤ price ≤ 100000)
 * На следующих M строках - информация о наличных деньгах в формате:
 *
 * nominal count
 * nominal - номинал монеты / купюры (1 ≤ nominal ≤ 100000)
 * count - количество монет / купюр в автомате (1 ≤ count ≤ 1000)
 * На следующих K строках - последовательность действий покупателя в формате:
 *
 * op arg
 * Виды операций op:
 *
 * 1 - нажата кнопка "Купить". Аргумент arg задает номер товара (от 1 до N)
 * 2 - внесена монета или купюра. Аргумент arg задает номинал
 * 3 - нажата кнопка "Выдать". Без аргумента.
 * 4 - нажата кнопка "Отмена". Без аргумента.
 * Все числовые значения - неотрицательные целые.
 *
 * Формат выходных данных
 * В качестве выхода должно быть выведено K строк (одна строка на каждую операцию). Выходная строка должна содержать через пробел четыре суммы (соответствуют значениям на дисплее):
 *
 * стоимость
 * внесено
 * осталось внести
 * сдача
 * Если операция проигнорирована (отсутствующий товар, выдача при неполной оплате, фальшивая купюра и т.д.) - вывод должен повторять предыдущую строку.
 *
 * После операций отмены или успешной продажи все четыре значения должны быть равны 0.
 *
 * Примеры
 * Входные данные:
 * 5 5 8
 * 1 5 100
 * 2 10 25
 * 3 0 30
 * 4 1 100
 * 5 3 120
 * 1 100
 * 2 50
 * 5 20
 * 10 10
 * 100 1
 * 1 2
 * 1 4
 * 2 100
 * 3
 * 2 10
 * 2 10
 * 2 10
 * 3
 *
 * Выходные данные:
 * 25 0 25 0
 * 125 0 125 0
 * 125 100 25 0
 * 125 100 25 0
 * 125 110 15 0
 * 125 120 5 0
 * 125 130 0 5
 * 0 0 0 0
 */
public class TaskE {
}
